<script type="text/javascript">
var modified_users = 0;
var modified_groups = 0;
var modified_teams = 0;
</script>

<%
@groups_cache ||= {}
@group_obj_cache ||= {}
%>

<table id="tree_main" style="width:100%; background-color:#f9bf8b; border:solid 2px; border-top-color:#fbe2b1; border-left-color:#fbe2b1; border-bottom-color:dimgray; border-right-color:dimgray;">
<% if (!@login_user.nil? and @login_user.admin?(User::AUTH_FOLDER)) %>
  <tr id="tr_admin_panel">
    <td style="padding:5px 5px 2px; text-align:right;">
      <table style="width:100%;">
         <tr>
            <td style="text-align:left; background-color:white; border:solid 1px; border-bottom-color:#fbe2b1; border-right-color:#fbe2b1; border-top-color:dimgray; border-left-color:dimgray;">
            <% if @group_id.blank? %>
              <div class="button_gray" style="width:110px;" onclick="showGroupTreeToSelect('<%= TreeElement::ROOT_ID %>');">
                <%= t('btn.select_group') %>
              </div>
            <% else %>
              <table style="width:100%;">
                <tr>
                  <td nowrap style="text-indent:10px; text-align:left;">
                    <%= t('cap.group') %> <a class="linked_path" href="javascript:this.onclick()" onclick="showGroupTreeToSelect('<%= @group_id %>'); return false;"><%= Group.get_path(@group_id, @groups_cache, @group_obj_cache) %></a>
                    <img class="img_btn" src="<%= THETIS_RELATIVE_URL_ROOT %>/images/icons/erase.png" title="<%= t('btn.clear') %>" onclick="clearGroup()" style="margin-left:10px;" />
                  </td>
                </tr>
              </table>
            <% end %>
            </td>
        </tr>
      </table>
    </td>
  </tr>
<% end %>
  <tr>
    <td>
      <table style="width:100%;">
        <tr>
        <% if !@login_user.nil? %>
          <td nowrap style="padding:5px 20px; text-align:left;">
            <input type="button" value="<%= t('btn.new') %>" onclick="onCreateFolderClicked(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.rename') %>" onclick="onRenameFolderClicked(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.delete') %>" onclick="onDeleteFolderClicked();" style="width:80px;" />
            <input type="button" value="<%= t('btn.move') %>" onclick="onMoveFolderClicked();" style="width:80px;" />
          </td>
        <% else %>
          <td style="padding:5px 20px; text-align:left;">
            <%= t('folder.login_to_edit_tree') %>
          </td>
        <% end %>
          <td style="padding:5px 20px; text-align:right;">
        <% unless @login_user.nil? %>
            <%
            opts = []
            opts << [t('folder.opt.items_list'), 'items']
            opts << [t('folder.opt.items_order'), 'items_order']
            opts << [t('folder.opt.folders_order'), 'folders_order']
            opts << [t('folder.opt.authorities'), 'auth']
            opts << [t('folder.opt.display_control'), 'disp']
            %>
            <%= select_tag('select_opt', options_for_select(opts, nil), :onchange => 'changeOption(this.value);', :style => 'width:200px; color:chocolate; font-weight:bold;') %>
        <% end %>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr style="height:100%;">
    <td style="padding-bottom:7px; text-align:center;">

      <table style="background-color:white; width:100%;">
        <tr>
          <td id="td_tree" style="border:inset 2px silver; padding:0px; text-align:left; vertical-align:top;">
            <%= form_tag( {:controller => 'folders', :action => 'show_tree'}, :method => 'post', :name => 'form_folder_tree') %>
              <div id="divFolderTree" style="overflow:auto;"><div id="folderTree" style="text-align:left; margin:10px;"></div></div>
            </form>
          </td>
          <td id="drag_border" style="width:5px; background-color:#f9bf8b; cursor:w-resize; vertical-align:middle;">
            <img src="<%= THETIS_RELATIVE_URL_ROOT %>/images/controls/grip_vertical.png">
          </td>
          <td id="td_view" style="width:63%; border:inset 2px silver; text-align:center; vertical-align:top;">
            <div id="div_view" style="overflow:auto; width:100%;">&nbsp;</div>
          </td>
        </tr>
      </table>

    </td>
  </tr>
</table>

<%
@folder_tree.each do |parent_id, child_folders|
  child_folders.each do |folder|
    folder_xtype = folder.xtype

    # >>>  Only for ver.0.9.1
    if (folder_xtype == Folder::XTYPE_USER)
      begin
        user = User.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if user.nil?
    end
    # <<<
    # >>>  To make sure
    if (folder_xtype == Folder::XTYPE_GROUP)
      begin
        group = Group.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if group.nil?
    end
    if (folder_xtype == Folder::XTYPE_TEAM)
      begin
        team = Team.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if team.nil?
    end
    # <<<
%>
  <span id="xtype_<%= folder.id %>" style="display:none;"><%= folder_xtype %></span>
<%
  end
end
%>
  <span id="xtype_<%= TreeElement::ROOT_ID %>" style="display:none;"></span>


<script type="text/javascript">

new Draggable("drag_border", {revert:false, constraint:"horizontal"});

var BorderDragObserver = Class.create();
BorderDragObserver.prototype = {
  initialize: function() {
  },
  onStart: function(eventName, draggable, event) {
  },
  onDrag: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    var divFolderTree = _z("divFolderTree");
    var td_tree = _z("td_tree");
    var view = _z("div_view");
    var td_view = _z("td_view");
    var orgWidthFolderTree = divFolderTree.offsetWidth;
    var orgWidthView = view.offsetWidth;

    draggable.options.snap = function(x, y) {
      return onBorderDragged(x, y, divFolderTree, td_tree, view, td_view, orgWidthFolderTree, orgWidthView);
    };
  },
  onEnd: function(eventName, draggable, event) {
  }
}
Draggables.addObserver( new BorderDragObserver() );

function onBorderDragged(x, y, divFolderTree, td_tree, view, td_view, orgWidthFolderTree, orgWidthView)
{
  var leftWidth = orgWidthFolderTree + x;
  var rightWidth = orgWidthView - x;
  if (leftWidth < 100 && x < 0) {
    return [100-orgWidthFolderTree, y];
  } else if (rightWidth < 100 && x > 0) {
    return [orgWidthView-100, y];
  }
  divFolderTree.style.width = leftWidth + "px";
  td_tree.style.width = leftWidth + "px";
  td_view.style.width = "auto";
  view.style.width = rightWidth + "px";
  return [x, y];
}

function onLoadSub()
{
  var array = [["0", " (root)", "", "selectFolder('0');", 0]];
  var folderImgs = [
  <% icons = Folder.get_icons(nil, false, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(Folder::XTYPE_USER, false, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(Folder::XTYPE_GROUP, false, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(Folder::XTYPE_TEAM, false, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(Folder::XTYPE_SYSTEM, false, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(nil, true, false) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(nil, false, true) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"],
  <% icons = Folder.get_icons(nil, true, true) %>
    ["<%= icons[1] %>", "<%= icons[2] %>"]
  ];
  ThetisBox.buildTree("", array, "folderTree", folderImgs);
  <% @folder_tree.each do |parent_id, child_folders| %>
  array = [
    <%
    child_folders.each_with_index do |folder, idx|

      case folder.xtype
        when Folder::XTYPE_USER
          img_idx = 1
        when Folder::XTYPE_GROUP
          img_idx = 2
        when Folder::XTYPE_TEAM
          img_idx = 3
        when Folder::XTYPE_SYSTEM
          img_idx = 4
        else
          if folder.bbs_top?
            if folder.locked?
              img_idx = 7
            else
              img_idx = 6
            end
          else
            if folder.locked?
              img_idx = 5
            else
              img_idx = 0
            end
          end
      end

      folder_name = folder.name
      if (!@login_user.nil? and @login_user.admin?(User::AUTH_FOLDER))
        if (folder.xtype == Folder::XTYPE_USER)
          folder_name = folder.name + ' : ' + User.get_name(folder.owner_id)
        elsif (folder.xtype == Folder::XTYPE_GROUP)
          folder_name = Group.get_path(folder.owner_id, @groups_cache, @group_obj_cache)
        end
      end
    %>
    ["<%= folder.id %>", " <%= folder_name %>", "", "selectFolder('<%= folder.id %>');", <%= img_idx %>]
    <%
      if idx < (child_folders.length - 1)
    %>
    ,
    <%
      end
    end
    %>
  ];
  ThetisBox.buildTree("<%= parent_id %>", array, "folderTree", folderImgs, false);
  <% end %>

<% unless session[:folder_id].blank? %>
  var nodeId = "<%= session[:folder_id] %>";
  ThetisBox.selectTree("folderTree", nodeId, true);
  if (ThetisBox.isSelectedTree("folderTree", nodeId)) {
    doGetItems(<%= session[:folder_id] %>);
  }
<% end %>
}

function checkName(val)
{
  var val = trim(val, false);

  if (val.charAt(0) == '$') {
    msg("<%= t('folder.reserved_name') %>");
    return false;
  }
  if (val.indexOf('/') >= 0) {
    msg("<%= t('folder.reserved_char') %>");
    return false;
  }
  return true;
}

function checkSystemFolder(folderId)
{
  var xtype = _z("xtype_"+folderId).innerHTML;

  if (xtype == "<%= Folder::XTYPE_SYSTEM %>") {
    msg("<%= t('folder.blocked_by_system') %>");
    return false;
  }
  return true;
}

function checkMyFolder(folderId)
{
  var xtype = _z("xtype_"+folderId).innerHTML;

  if (xtype == "<%= Folder::XTYPE_USER %>") {
    msg("<%= t('folder.my_folder_restricted') %>");
    return false;
  }
  return true;
}

function checkGroupFolder(folderId)
{
  var xtype = _z("xtype_"+folderId).innerHTML;

  if (xtype == "<%= Folder::XTYPE_GROUP %>") {
    msg("<%= t('folder.group_folder_restricted') %>");
    return false;
  }
  return true;
}

function checkTeamFolder(folderId)
{
  var xtype = _z("xtype_"+folderId).innerHTML;

  if (xtype == "<%= Folder::XTYPE_TEAM %>") {
    msg("<%= t('folder.team_folder_restricted') %>");
    return false;
  }
  return true;
}

function onCreateFolderClicked(pos)
{
  var folderId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (!folderId) {
    msg("<%= t('folder.select_parent') %>");
    return;
  }

  if (!checkSystemFolder(folderId)) {
    return;
  }

  ThetisBox.openTree("folderTree", folderId, true);

  var thetisBox = new ThetisBox;
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "doCreateFolder("+thetisBox.id+", '"+folderId+"')", "<%= t('folder.specify_name') %>", "");
}

function doCreateFolder(thetisBoxId, folderId)
{
  var thetisBoxEdit = _z("thetisBoxEdit-"+thetisBoxId);
  if (thetisBoxEdit && thetisBoxEdit.value) {
    var val = thetisBoxEdit.value;
    ThetisBox.remove(thetisBoxId);

    if (!checkName(val)) {
      return false;
    }

    var addParams = [];
    addParams.push("selectedFolderId="+folderId);
    addParams.push("thetisBoxEdit="+encodeURIComponent(val));
    addParams.push("authenticity_token=<%= form_authenticity_token %>");

    var thetisBoxProgress = prog("TOP-RIGHT");

    new Ajax.Updater(
        "folderTree:"+folderId,
        "<%= url_for(:controller => 'folders', :action => 'create') %>",
        {
          method:"post",
          parameters:addParams.join("&"),
          evalScripts:true,
          insertion:Insertion.Bottom,
          onComplete:function(request) {
            thetisBoxProgress.remove();
          }
        }
      );
  }
}

function doRenameFolder(thetisBoxId, folderId)
{
  var thetisBoxEdit = _z("thetisBoxEdit-"+thetisBoxId);
  if (thetisBoxEdit && thetisBoxEdit.value) {
    var val = thetisBoxEdit.value;
    ThetisBox.remove(thetisBoxId);

    if (!checkName(val)) {
      return false;
    }

    var thetisBoxProgress = prog("TOP-RIGHT");

    var addParams = [];
    addParams.push("id="+folderId);
    addParams.push("thetisBoxEdit="+encodeURIComponent(val));
    addParams.push("authenticity_token=<%= form_authenticity_token %>");

    new Ajax.Updater(
        "a_folderTree:"+folderId,
        "<%= url_for(:controller => 'folders', :action => 'rename') %>",
        {
          method:"post",
          parameters:addParams.join("&"),
          evalScripts:true,
          onComplete:function(request) {
            thetisBoxProgress.remove();
          }
        }
      );
  }
  return true;
}

function onRenameFolderClicked(pos)
{
  var folderId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (!folderId) {
    msg("<%= t('folder.select') %>");
    return;
  }

  if (folderId == "<%= TreeElement::ROOT_ID %>") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folderId)
      || !checkGroupFolder(folderId)) {
    return;
  }

  ThetisBox.openTree("folderTree", folderId, true);

  var thetisBox = new ThetisBox;
  var name = trim(restoreHTML(_z("folderTree:"+folderId+"_name").innerHTML));
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "doRenameFolder("+thetisBox.id+", '"+folderId+"')", "<%= t('folder.specify_name') %>", name);
}

function onDeleteFolderClicked()
{
  var folderId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (!folderId) {
    msg("<%= t('folder.select') %>");
    return;
  }

  if (folderId == "<%= TreeElement::ROOT_ID %>") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folderId)
      || !checkMyFolder(folderId)
      || !checkGroupFolder(folderId)
      || !checkTeamFolder(folderId)) {
    return;
  }

  ThetisBox.openTree("folderTree", folderId, true);

  var name = trim(_z("folderTree:"+folderId+"_name").innerHTML);
  confm("<%= t('paren.square.left') %>"+name+"<%= t('msg.confirm_to_delete') %>", "doDelete("+folderId+")");
}

function doDelete(folderId)
{
  var addParams = [];
  addParams.push(Form.serialize(document.form_folder_tree));
  addParams.push("id="+folderId);
  addParams.push("authenticity_token=<%= form_authenticity_token %>");

  var thetisBox = prog("TOP-RIGHT");

  new Ajax.Request(
      "<%= url_for(:controller => 'folders', :action => 'destroy') %>",
      {
        method:"post",
        parameters:addParams.join("&"),
        onComplete:function(request) {
          thetisBox.remove();
          if (request.responseText == "") {
            removeElem(_z("base_folderTree:"+folderId));
            _z(ThetisBox.getSelKeeperId("folderTree")).value = "";
          }
          request.responseText.evalScripts();
        }
      }
    );
}

function onMoveFolderClicked()
{
  var folderId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (!folderId) {
    msg("<%= t('folder.select') %>");
    return;
  }

  if (folderId == "<%= TreeElement::ROOT_ID %>") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folderId)
      || !checkMyFolder(folderId)
      || !checkGroupFolder(folderId)
      || !checkTeamFolder(folderId)) {
    return;
  }

  ThetisBox.openTree("folderTree", folderId, true);

  var thetisBox = new ThetisBox;
  thetisBox.show("CENTER", "", "TREE", "doMoveFolder("+thetisBox.id+", '"+folderId+"')", "<%= t('folder.select_dest')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'folders', :action => 'ajax_get_tree') %>?id="+folderId, "0");
}

function doMoveFolder(thetisBoxId, folderId)
{
  var thetisBox = ThetisBox.getInstance(thetisBoxId);
  if (thetisBox) {
    var treeNodeId = thetisBox.getSelectedTreeNodeId();
    if (treeNodeId) {
      ThetisBox.remove(thetisBoxId);

      var addParams = [];
      addParams.push("id="+folderId);
      addParams.push("tree_node_id="+treeNodeId);

      prog("TOP-RIGHT");
      var frm = createPostForm("<%= url_for(:controller => 'folders', :action => 'move') %>", addParams);
      frm.submit();
    }
  }
}

function selectFolder(folderId)
{
  var select_opt = _z("select_opt");

  if (select_opt == null) {
    doGetItems(folderId);
  } else {
    switch (_z("select_opt").value)
    {
      case "items": doGetItems(folderId); break;
      case "items_order": doGetItemsOrder(folderId); break;
      case "folders_order": doGetFoldersOrder(folderId); break;
      case "auth": doGetAuth(folderId); break;
      case "disp": doGetDispCtrl(folderId); break;
    }
  }
}

function changeOption(val)
{
  var folderId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (!folderId) {
    return false;
  }

  switch (val) {
    case "items": doGetItems(folderId); break;
    case "items_order": doGetItemsOrder(folderId); break;
    case "folders_order": doGetFoldersOrder(folderId); break;
    case "auth": doGetAuth(folderId); break;
    case "disp": doGetDispCtrl(folderId); break;
  }
}

function doGetItems(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_items') %>", addParams);
}

function doGetItemsOrder(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_items_order') %>", addParams);
}

function doGetFoldersOrder(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);
<% unless @group_id.nil? %>
  addParams.push("group_id=<%= @group_id %>");
<% end %>

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_folders_order') %>", addParams);
}

function doGetAuth(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_users') %>", addParams);
}

function doGetDispCtrl(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_disp_ctrl') %>", addParams);
}

function getApplyFunc(folderId)
{
  var applyFunc = null;
  if (modified_users > 0) {
    modified_users = 0;
    applyFunc = "doApplyAuthUsers("+folderId+")";
  } else if (modified_groups > 0) {
    modified_groups = 0;
    applyFunc = "doApplyAuthGroups("+folderId+")";
  } else if (modified_teams > 0) {
    modified_teams = 0;
    applyFunc = "doApplyAuthTeams("+folderId+")";
  }
  return applyFunc;
}

function selectTabUsers(folderId)
{
  var applyFunc = getApplyFunc(folderId);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabUsers("+folderId+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabUsers(folderId);
  }
}

function _selectTabUsers(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_users') %>", addParams);
}

function doApplyAuthUsers(folderId)
{
  selectListAll(_z("users_auth"));

  var addParams = [];
  addParams.push("id=" + folderId);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_users') %>", addParams);
}

function selectTabGroups(folderId)
{
  var applyFunc = getApplyFunc(folderId);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabGroups("+folderId+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabGroups(folderId);
  }
}

function _selectTabGroups(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_groups') %>", addParams);
}

function doApplyAuthGroups(folderId)
{
  selectListAll(_z("groups_auth"));

  var addParams = [];
  addParams.push("id=" + folderId);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_groups') %>", addParams);
}

function selectTabTeams(folderId)
{
  var applyFunc = getApplyFunc(folderId);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabTeams("+folderId+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabTeams(folderId);
  }
}

function _selectTabTeams(folderId)
{
  var addParams = [];
  addParams.push("id=" + folderId);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_teams') %>", addParams);
}

function doApplyAuthTeams(folderId)
{
  selectListAll(_z("teams_auth"));

  var addParams = [];
  addParams.push("id=" + folderId);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_teams') %>", addParams);
}

function showGroupTreeToSelect(group_id)
{
  var thetisBox = new ThetisBox;
  thetisBox.show("CENTER", "", "TREE", "onGroupNodeSelected("+thetisBox.id+")", "<%= t('group.select_to_show')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'groups', :action => 'ajax_get_tree') %>", group_id);
}

function onGroupNodeSelected(thetisBoxId)
{
  var thetisBox = ThetisBox.getInstance(thetisBoxId);
  if (thetisBox) {
    var treeNodeId = thetisBox.getSelectedTreeNodeId();
    if (treeNodeId) {
      ThetisBox.remove(thetisBoxId);

      prog("TOP-RIGHT");
      location.href = "<%= url_for(:controller => 'folders', :action => 'show_tree') %>?tree_node_id="+treeNodeId;
    }
  }
}

function clearGroup()
{
  prog("TOP-RIGHT");
  location.href = "<%= url_for(:controller => 'folders', :action => 'show_tree') %>";
}

function onFolderTreeNodeClicked(folderId)
{
  selectFolder(folderId);
  var selNodeId = ThetisBox.getSelectedTreeNodeId("folderTree");
  if (selNodeId == folderId) {
    ThetisBox.toggleTree("folderTree", folderId);
  }
  ThetisBox.selectTree("folderTree", folderId);
}

</script>

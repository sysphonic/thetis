
<script src="<%= THETIS_RELATIVE_URL_ROOT %>/javascripts/ckeditor/ckeditor.js" type="text/javascript"></script>

<%= render(:partial => 'common/plupload_init') %>

<script type="text/javascript">
var oEditor;
tabs = ["workflow", "basic", "description", "image", "attachment"];
</script>

<% if @item.xtype == Item::XTYPE_WORKFLOW %>
<script type="text/javascript">
var users_cache = [];
</script>
<% end %>

<%= hidden_field_tag('item_id', @item.id) %>
<%= hidden_field_tag('folder_id', @item.folder_id) %>

<table style="width:100%;">
  <tr style="height:5px;">
    <td></td>
    <td rowspan="2">
  <% if @item.id.nil? %>
      <div id="tmpl_button" class="button_gray" style="float:left;" onclick="showTemplateTreeToSelect();">
        <%= t('btn.template') %>
      </div>
  <% end %>
    </td>
  </tr>
  <tr>
    <td style="text-align:center;">

    <table style="width:100%; border-spacing:2px;">
      <tr>
        <!-- style.backgroundColor is for initial display. -->
      <% if @item.xtype == Item::XTYPE_WORKFLOW %>
        <td id="tab_workflow" class="td_tab" nowrap onclick="showTab('workflow', tabs, 'orange');">
          <%= Workflow.model_name.human %>
        </td>
      <% end %>
        <td id="tab_basic" class="td_tab" nowrap onclick="showTab('basic', tabs, 'blue');">
          <%= t('cap.basic_info') %>
        </td>
        <td id="tab_description" class="td_tab" nowrap onclick="showTab('description', tabs, 'forestgreen');">
          <%= Item.human_attribute_name('description') %>
        </td>
        <td id="tab_image" class="td_tab" nowrap onclick="showTab('image', tabs, 'red');">
          <%= t('image.plural') %>
        </td>
        <td id="tab_attachment" class="td_tab" nowrap onclick="showTab('attachment', tabs, 'brown');">
          <%= t('attachment.plural_full') %>
        </td>
        <td>&nbsp;</td>
      </tr>
    </table>

    </td>
  </tr>
  <tr>
    <td style="text-align:center;" colspan="2">

    <% if @item.xtype == Item::XTYPE_WORKFLOW %>
      <div id="tab_div_workflow">
        <%= form_tag( {:controller => 'items', :action => 'set_workflow', :id => @item }, :id => 'form_workflow', :method => 'post') %>
        <table style="width:100%; background-color:#FFF8D7; border:solid 5px gold; padding-bottom:15px;">
          <tr>
            <td>
              <div id="div_item_workflow" style="overflow:auto;">
                <%= render(:partial => 'edit_item_workflow') %>
              </div>
            </td>
          </tr>
          <tr style="height:20px;"><td></td></tr>
          <tr>
            <td>
              <table style="margin:0px auto;">
                <tr>
                  <td class="img_button_td" onclick="prog('TOP-RIGHT'); location.href='<%= url_for(:controller => 'history', :action => 'back') %>';">
                    <%= t('btn.back') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="doSave();">
                    <%= t('btn.save') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="onShowItemClicked();">
                    <%= t('btn.show') %>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
        </form>
      </div>
    <% end %>

      <div id="tab_div_basic">
        <%= form_tag( {:controller => 'items', :action => 'set_basic', :id => @item }, :id => 'form_basic', :method => 'post') %>
        <table style="width:100%; padding-bottom:15px; background-color:aliceblue; border:solid 5px cornflowerblue;">
          <tr>
            <td>
              <div id="div_item_basic" style="overflow:auto;">
                <%= render(:partial => 'edit_item_basic') %>
              </div>
            </td>
          </tr>
          <tr style="height:20px;"><td></td></tr>
          <tr>
            <td>
              <table style="margin:0px auto;">
                <tr>
                  <td class="img_button_td" onclick="prog('TOP-RIGHT'); location.href='<%= url_for(:controller => 'history', :action => 'back') %>';">
                    <%= t('btn.back') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="doSave();">
                    <%= t('btn.save') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="onShowItemClicked();">
                    <%= t('btn.show') %>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
        </form>
      </div>

      <div id="tab_div_description" style="display:none;">
      <%= form_tag( {:controller => 'items', :action => 'set_description', :id => @item }, :id => 'form_description', :method => 'post') %>
      <table style="width:100%; padding-bottom:15px; background-color:honeydew; border:solid 5px yellowgreen;">
        <tr>
          <td>
            <div id="div_item_description" style="overflow:auto;">
              <%= render(:partial => 'edit_item_description') %>
            </div>
          </td>
        </tr>
        <tr style="height:20px;"><td></td></tr>
        <tr>
          <td>
            <table style="margin:0px auto;">
              <tr>
                <td class="img_button_td" onclick="prog('TOP-RIGHT'); location.href='<%= url_for(:controller => 'history', :action => 'back') %>';">
                  <%= t('btn.back') %>
                </td>
              <% unless @item.id.nil? %>
                <td style="width:15px;"></td>
                <td class="img_button_td" onclick="showRestoreSelector();">
                  <%= t('btn.restore') %>
                </td>
              <% end %>
                <td style="width:15px;"></td>
                <td class="img_button_td" onclick="doSave();">
                  <%= t('btn.save') %>
                </td>
                <td style="width:15px;"></td>
                <td class="img_button_td" onclick="onShowItemClicked();">
                  <%= t('btn.show') %>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
      </form>
      </div>

      <div id="tab_div_image" style="display:none;">

       <%= form_tag( {:controller => 'items', :action => 'set_image', :id => @item }, :id => 'form_image', :name => 'form_image', :method => 'post', :enctype => 'multipart/form-data') %>

        <table style="width:100%; padding-bottom:15px; background-color:#FFEEED; border:solid 5px salmon;">
          <tr>
            <td>
              <div id="div_item_image" style="overflow:auto;">
                <%= render(:partial => 'edit_item_image') %>
              </div>
            </td>
          </tr>
          <tr style="height:20px;"><td></td></tr>
          <tr>
            <td>
              <table style="margin:0px auto;">
                <tr>
                  <td class="img_button_td" onclick="prog('TOP-RIGHT'); location.href='<%= url_for(:controller => 'history', :action => 'back') %>';">
                    <%= t('btn.back') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="doSave();">
                    <%= t('btn.register') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="onShowItemClicked();">
                    <%= t('btn.show') %>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
        </form>

      </div>

      <div id="tab_div_attachment" style="display:none;">

       <%= form_tag( {:controller => 'items', :action => 'set_attachment', :id => @item }, :id => 'form_attachment', :name => 'form_attachment', :method => 'post', :enctype => 'multipart/form-data') %>

        <table style="width:100%; background-color:#FFF6DD; padding-bottom:15px; border:solid 5px tan;">
          <tr>
            <td>
              <div id="div_item_attachment" style="overflow:auto;">
                <%= render(:partial => 'edit_item_attachment') %>
              </div>
            </td>
          </tr>
          <tr style="height:20px;"><td></td></tr>
          <tr>
            <td>
              <table style="margin:0px auto;">
                <tr>
                  <td class="img_button_td" onclick="prog('TOP-RIGHT'); location.href='<%= url_for(:controller => 'history', :action => 'back') %>';">
                    <%= t('btn.back') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="doSave();">
                    <%= t('btn.register') %>
                  </td>
                  <td style="width:15px;"></td>
                  <td class="img_button_td" onclick="onShowItemClicked();">
                    <%= t('btn.show') %>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>

        </form>
  
      </div>

    </td>
  </tr>
</table>


<%= render(:partial => 'common/save_change_func') %>

<script type="text/javascript">

<% if @item.xtype == Item::XTYPE_WORKFLOW %>
  showTab("workflow", tabs, "orange");
<% else %>
  showTab("basic", tabs, "blue");
<% end %>

function _ajaxPost(form_id, p_url, target_id, func_complete, func_error)
{
  var frm = _z(form_id);

  new Ajax.Updater(
      target_id,
      p_url,
      {
        method:"post",
        parameters:Form.serialize(frm),
        evalScripts:true,
        onComplete:function(request) {
          if (showErrorMsg(_z(target_id)) == true) {
            setTimeout(func_error, 10);
          } else {
            setTimeout(func_complete, 10);
          }
        }
      }
    );
  return false;
}

var modifiedWorkflow = 0;
var modifiedBasic = 0;

function isModifiedWorkflow()
{
  return (modifiedWorkflow > 0);
}

function isModifiedBasic()
{
  return (modifiedBasic > 0);
}

function isModifiedDescription()
{
  try {
    return oEditor.checkDirty();
  } catch (e) {
    return false;
  }
}

function isModifiedImage()
{
  return (jQuery("#img_uploader").plupload("getFiles").length > 0);
}

function isModifiedAttachment()
{
  return (jQuery("#attachment_uploader").plupload("getFiles").length > 0);
}

<% if @item.xtype == Item::XTYPE_WORKFLOW %>

function onSelectWfOrder()
{
  var list = _z("users_selected");
  for (var i=0; i<list.length; i++) {
    users_cache[list.options[i].value] = list.options[i].text;
  }
  list.length=0;
  var order_id = getListSelected(_z("orders"))[0];
  var divOrder=_z("order-"+order_id);
  if (divOrder.value == null) {
    return;
  }
  var array = divOrder.value.split(",");
  for (var i=0; i<array.length; i++) {
    if (array[i] == null || array[i].length <= 0) {
      continue;
    }
    list.options[i] = new Option(users_cache[array[i]], array[i]);
  }
}

function addWfOrder()
{
  var order_list = _z("orders");
  var order_id = 1;
  if (order_list.length > 0) {
    order_id = parseInt(order_list.options[order_list.length-1].value, 10) + 1;
  }
  var d = document.createElement("input");
  d.id = "order-"+order_id;
  d.name = d.id;
  d.type = "hidden";
  _z("form_workflow").appendChild(d);
  addList(order_list, "<%= t('workflow.order_prefix') %>"+order_id, order_id, true);
  if (getListSelected(order_list).length <= 0) {
    order_list.options[order_list.length-1].selected = true;
  }
  modifiedWorkflow++;
  return false;
}

function removeWfOrder()
{
  var order_list = _z("orders");
  var del_arr = deleteList(order_list);
  for (var i=0; i < del_arr.length; i++) {
    _z("order-"+del_arr[i]).remove();
  }
  _z("users_selected").length=0;
  modifiedWorkflow++;
  return false;
}

function addWfUser()
{
  var order_arr=getListSelected(_z("orders"));
  if (order_arr <= 0) {
    msg("<%= t('workflow.select_order')%>");
    return;
  }
  var add_arr = moveList(_z("user_candidates"), _z("users_selected"));
  var order_id = order_arr[0];
  var divOrder = _z("order-"+order_id);
  var array=add_arr;
  if (divOrder.value != null && divOrder.value.length > 0) {
    array = divOrder.value.split(",");
    array = array.concat(add_arr);
  }
  divOrder.value = array.join(",");
  modifiedWorkflow++;
  return false;
}

function removeWfUser()
{
  var del_arr = moveList(_z("users_selected"), _z("user_candidates"));
  var order_id = getListSelected(_z("orders"))[0];
  var divOrder = _z("order-"+order_id);
  if (divOrder.value == null) {
    return;
  }
  var array = divOrder.value.split(",");
  array = removeArrayElements(array, del_arr);
  divOrder.value = array.join(",");
  modifiedWorkflow++;
  return false;
}

function checkWorkflow()
{
  var list = _z("orders");
  if (list.length <= 0) {
    msg("<%= t('workflow.specify_orders') %>");
    return false;
  }
  for (var i=0; i<list.length; i++) {
    var order_id = list.options[i].value;
    var divOrder=_z("order-"+order_id);
    if (divOrder.value == null || divOrder.value.length <= 0) {
      msg("<%= t('workflow.specify_users_for1') %>"+order_id+"<%= t('workflow.specify_users_for2') %>");
      return false;
    }
  }
  return true;
}

<% end %>

function checkGeneral()
{
  var title = trim(_z("item_title").value, false);
  if (title.length <= 0) {
    msg("<%= t('item.specify_title') %>");
    return false;
  }
  return true;
}

function checkBasic()
{
  var frm = _z("form_basic");
  if (frm.check_create_folder != null && frm.check_create_folder.checked) {

    var folder_name = trim(frm.create_folder_name.value, false);

    if (folder_name.length <= 0) {
      msg("<%= t('item.specify_folder_name') %>");
      return false;
    }

    if (folder_name.charAt(0) == "$") {
      msg("<%= t('folder.reserved_name') %>");
      return false;
    }
    if (folder_name.indexOf("/") >= 0) {
      msg("<%= t('folder.reserved_char') %>");
      return false;
    }
  }
  return true;
}

function showRestoreSelector()
{
  var thetisBoxProgress = prog("CENTER");

  var thetisBox = new ThetisBox;
  thetisBox.title = "<%= t('cap.restore_from_log') %>";

  var addParams = [];
  addParams.push("id=<%= @item.id %>");

  new Ajax.Request(
      "<%= url_for(:controller => 'items', :action => 'recent_descriptions') %>",
      {
        method:"get",
        parameters:addParams.join("&"),
        onComplete:function(request) {
          thetisBox.show(
                    "CENTER",
                    (_mainWidth*70/100)+","+(_mainHeight*70/100),
                    "TRAY",
                    "",
                    "",
                    request.responseText
                  );
          thetisBoxProgress.remove();
          request.responseText.evalScripts();
        }
      }
    );
}

var thetisBoxProgress = new ThetisBox;
var saveFuncs = null;
var saveFuncsIdx = 0;

function doSave()
{
  if (saveFuncsIdx > 0) {
    msg("<%= t('item.being_registered') %>");
    return;
  }

  if (!checkGeneral()) {
    return false;
  }

  saveFuncs = [];

<% if @item.xtype == Item::XTYPE_WORKFLOW %>
  // Workflow
  if (isModifiedWorkflow()) {
    if (!checkWorkflow()) {
      showTab("workflow", tabs, "orange");
      return false;
    }
    addInputHidden(_z("form_workflow"), null, "item[folder_id]", _z("item_folder_id").value); 
    saveFuncs.push(
        function() {
          _ajaxPost(
              "form_workflow",
              "<%= url_for(:controller => 'items', :action => 'set_workflow') %>?id="+_z("item_id").value,
              "div_item_workflow",
              function(){ onSaveComplete("workflow") },
              function(){ onSaveError("workflow") }
            );
        }
      );
  }
<% end %>

  // Basic
  if (isModifiedBasic()) {
    if (!checkBasic()) {
      showTab("basic", tabs, "blue");
      return false;
    }
    saveFuncs.push(
        function() {
          _ajaxPost(
              "form_basic",
              "<%= url_for(:controller => 'items', :action => 'set_basic') %>?id="+_z("item_id").value,
              "div_item_basic",
              function(){ onSaveComplete("basic") },
              function(){ onSaveError("basic") }
            );
        }
      );
  }

  // Description
  if (isModifiedDescription()) {
    addInputHidden(_z("form_description"), null, "item[folder_id]", _z("item_folder_id").value);
    _z("item_description").value = oEditor.getData();
    saveFuncs.push(
        function() {
          _ajaxPost(
              "form_description",
              "<%= url_for(:controller => 'items', :action => 'set_description') %>?id="+_z("item_id").value,
              "div_item_description",
              function(){ onSaveComplete("description") },
              function(){ onSaveError("description") }
            );
        }
      );
  }

  // Image
  if (isModifiedImage()) {
    saveFuncs.push(
        function() {
          var hash = {
            id: _z("item_id").value,
            authenticity_token: "<%= form_authenticity_token %>"
          };
          ajaxUploadFile(
              "img_uploader",
              hash,
              "<%= url_for(:controller => 'items', :action => 'set_image') %>",
              "div_item_image",
              function(){
                setTimeout(setSortableImg, 100);
                onSaveComplete("image");
              },
              function(){ onSaveError("image") }
            );
        }
      );
  }

  // Attachment
  if (isModifiedAttachment()) {
    addInputHidden(_z("form_attachment"), null, "item[folder_id]", _z("item_folder_id").value);
    saveFuncs.push(
        function() {
          var hash = {
            id: _z("item_id").value,
            authenticity_token: "<%= form_authenticity_token %>"
          };
          ajaxUploadFile(
              "attachment_uploader",
              hash,
              "<%= url_for(:controller => 'items', :action => 'set_attachment') %>",
              "div_item_attachment",
              function(){
                setTimeout(setSortableAttach, 100);
                onSaveComplete("attachment");
              },
              function(){ onSaveError("attachment") }
            );
        }
      );
  }

  if (saveFuncs.length > 0) {
    thetisBoxProgress.show("TOP-RIGHT", "", "PROGRESS", "", "", "");
    removeElem(_z("tmpl_button"));
    setTimeout("onSaveComplete()", 10);
  }
}

function onSaveComplete(tabName)
{
  switch (tabName) {
    case "workflow":
      modifiedWorkflow = 0; break;
    case "basic":
      modifiedBasic = 0; break;
  }
  if (saveFuncsIdx < saveFuncs.length) {
    saveFuncs[saveFuncsIdx++]();
  } else {
    saveFuncsIdx = 0;
    thetisBoxProgress.remove();
    if (move_to_show) {
      doShow();
    } else {
      tip("<%= t('msg.save_success') %>");
    }
  }
}

function onSaveError(tabName)
{
  var tab = _z("tab_"+tabName);
  if (!tab) {
    return false;
  }
  if (tab.onclick) {
    tab.onclick();
  }

  saveFuncsIdx = 0;
  thetisBoxProgress.remove();
  move_to_show = false;

  return true;
}

var move_to_show = false;

function onShowItemClicked()
{
  if (_z("item_id").value=="") {
    msg("<%= t('item.register_first') %>");
    return;
  }
  if (isModifiedWorkflow() || isModifiedBasic() || isModifiedDescription() || isModifiedImage() || isModifiedAttachment()) {
    showConfirmSaveChange("move_to_show=true; doSave();", "doShow();");
  } else {
    doShow();
  }
}

function doShow()
{
  prog("TOP-RIGHT");
  location.href = "<%= url_for(:controller => 'items', :action => 'show') %>?id="+_z("item_id").value;
}

function showTemplateTreeToSelect()
{
  var thetisBox = new ThetisBox;
  thetisBox.show("CENTER", "", "TREE", "onTemplateTreeNodeSelected("+thetisBox.id+")", "<%= t('item.select_template')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'templates', :action => 'ajax_get_tree') %>", 0);

  if (isModifiedBasic() || isModifiedDescription()) {
    msg("<%= t('item.apply_template_info') %>");
  }
}

function onTemplateTreeNodeSelected(thetisBoxId)
{
  var thetisBox = ThetisBox.getInstance(thetisBoxId);
  if (thetisBox) {
    var treeNodeId = thetisBox.getSelectedTreeNodeId();
    if (treeNodeId) {
      ThetisBox.remove(thetisBoxId);

      prog("TOP-RIGHT");

      var addParams = [];
      addParams.push("tree_node_id="+treeNodeId);

      var frm = createPostForm("<%= url_for(:controller => 'templates', :action => 'copy') %>", addParams);
      frm.submit();
    }
  }
}

function doSelectGroup(thetisBoxId)
{
  var thetisBox = ThetisBox.getInstance(thetisBoxId);
  if (thetisBox) {
    var treeNodeId = thetisBox.getSelectedTreeNodeId();
    if (treeNodeId) {
      ThetisBox.remove(thetisBoxId);

      var addParams = [];
      addParams.push("tree_node_id="+treeNodeId);

      var thetisBoxProgress = prog("TOP-RIGHT");

      new Ajax.Updater(
          "div_selectUsers",
          "<%= url_for(:controller => 'items', :action => 'get_group_users') %>",
          {
            method:"get",
            parameters:addParams.join("&"),
            evalScripts:true,
            onComplete:function(request) {
              thetisBoxProgress.remove();
            }
          }
        );
    }
  }
}

function showGroupTreeToSelect(group_id)
{
  var thetisBox = new ThetisBox;
  thetisBox.show("CENTER", "", "TREE", "doSelectGroup("+thetisBox.id+")", "<%= t('group.select_to_show')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'groups', :action => 'ajax_get_tree') %>", group_id);
}

</script>
